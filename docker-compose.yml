version: '3.8'

services:
  # Zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log
    networks:
      - av-network

  # Kafka Broker
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      KAFKA_CONFLUENT_METRICS_ENABLE: 'true'
      KAFKA_CONFLUENT_SUPPORT_CUSTOMER_ID: anonymous
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka-data:/var/lib/kafka/data
    networks:
      - av-network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_JMXPORT: 9997
    networks:
      - av-network

  # HDFS NameNode
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - "9870:9870"
      - "9000:9000"
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
    environment:
      - CLUSTER_NAME=test
      - CORE_CONF_fs_defaultFS=hdfs://namenode:9000
    env_file:
      - ./config/hadoop.env
    networks:
      - av-network

  # HDFS DataNode
  datanode:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode
    restart: always
    volumes:
      - hadoop_datanode:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
      CORE_CONF_fs_defaultFS: hdfs://namenode:9000
    ports:
      - "9864:9864"
    env_file:
      - ./config/hadoop.env
    networks:
      - av-network

  # Spark Master
  spark-master:
    image: bitnami/spark:3.4
    container_name: spark-master
    command: bin/spark-class org.apache.spark.deploy.master.Master
    ports:
      - "8081:8080"
      - "7077:7077"
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark_jobs:/opt/bitnami/spark/jobs
      - ./config:/opt/bitnami/spark/conf
    networks:
      - av-network

  # Spark Worker
  spark-worker-1:
    image: bitnami/spark:3.4
    container_name: spark-worker-1
    command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
    depends_on:
      - spark-master
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=2
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    volumes:
      - ./spark_jobs:/opt/bitnami/spark/jobs
      - ./config:/opt/bitnami/spark/conf
    networks:
      - av-network

  # MLflow Tracking Server
  mlflow:
    build:
      context: ./mlflow_tracking
      dockerfile: Dockerfile
    container_name: mlflow-server
    ports:
      - "5000:5000"
    environment:
      - MLFLOW_BACKEND_STORE_URI=sqlite:///mlflow.db
      - MLFLOW_DEFAULT_ARTIFACT_ROOT=/mlflow/artifacts
    volumes:
      - mlflow-data:/mlflow
    command: mlflow server --host 0.0.0.0 --port 5000 --backend-store-uri sqlite:///mlflow/mlflow.db --default-artifact-root /mlflow/artifacts
    networks:
      - av-network

  # Flink JobManager
  jobmanager:
    image: flink:1.17-scala_2.12
    container_name: flink-jobmanager
    ports:
      - "8082:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 2
    volumes:
      - ./flink_processor:/opt/flink/jobs
    networks:
      - av-network

  # Flink TaskManager
  taskmanager:
    image: flink:1.17-scala_2.12
    container_name: flink-taskmanager
    depends_on:
      - jobmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: jobmanager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 2
    volumes:
      - ./flink_processor:/opt/flink/jobs
    networks:
      - av-network

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - av-network

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - av-network

  # Redis for caching
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - av-network

  # Kafka Producer Service
  kafka-producer:
    build:
      context: ./kafka_producer
      dockerfile: Dockerfile
    container_name: kafka-producer
    depends_on:
      - kafka
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPIC=sensor_data
      - VEHICLE_COUNT=5
      - SEND_INTERVAL=2.0
    networks:
      - av-network
    restart: unless-stopped

  # Dashboard Service (No Kafka version)
  dashboard-nokafka:
    build:
      context: .
      dockerfile: dashboard/Dockerfile
    container_name: dashboard-nokafka
    ports:
      - "8050:8050"
    environment:
      - DASH_HOST=0.0.0.0
      - DASH_PORT=8050
    volumes:
      - ./data:/app/data
    networks:
      - av-network
    restart: unless-stopped

  # Vehicle Simulation Service
  vehicle-simulation:
    build:
      context: .
      dockerfile: simulation/Dockerfile
    container_name: vehicle-simulation
    environment:
      - SIMULATION_DURATION=300
    volumes:
      - ./data:/app/data
    networks:
      - av-network
    restart: unless-stopped

  # Data Processor Service
  data-processor:
    build:
      context: .
      dockerfile: processor/Dockerfile
    container_name: data-processor
    volumes:
      - ./data:/app/data
    networks:
      - av-network
    restart: unless-stopped

  # Dashboard Service
  dashboard:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: dashboard
    depends_on:
      - kafka
      - redis
    ports:
      - "8051:8050"
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - DASH_HOST=0.0.0.0
      - DASH_PORT=8050
    networks:
      - av-network
    restart: unless-stopped

  # ML Inference Service
  ml-inference:
    build:
      context: ./ml_inference
      dockerfile: Dockerfile
    container_name: ml-inference
    depends_on:
      - kafka
      - redis
      - mlflow
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - INPUT_TOPIC=processed_sensor_data
      - OUTPUT_TOPIC=inference_results
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - REDIS_HOST=redis
    networks:
      - av-network
    restart: unless-stopped

  # Storage Service
  storage-service:
    build:
      context: ./storage_utils
      dockerfile: Dockerfile
    container_name: storage-service
    depends_on:
      - kafka
      - namenode
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TOPICS=inference_results,processed_sensor_data
      - HDFS_BASE_PATH=/data/streaming
      - S3_BUCKET=av-simulation-data
    networks:
      - av-network
    restart: unless-stopped

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  hadoop_namenode:
  hadoop_datanode:
  mlflow-data:
  prometheus-data:
  grafana-data:
  redis-data:

networks:
  av-network:
    driver: bridge
